#!/bin/bash
# zfs-snap-pac
#
# modified by hasechris
# inspired by timeshift-autosnap

set -e
##############################
#   Variables
##############################
ZFS_BOOTFS="none"
#readonly CONF_FILE="/etc/pacman-zfs-updatesnap.conf"
readonly CONF_FILE="/home/nemu/Projects/Pacman-ZFS-Hook/pacman-zfs-updatesnap.conf"
readonly SNAPSHOTS_TO_DELETE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
readonly LIST_MKINITCPIO_PRESET_KERNELS=$(cat /etc/mkinitcpio.d/linux.preset | grep 'PRESETS=' | cut -d '=' -f2 | tr -d '(' | tr -d ')' | tr -d "'")

##############################
# Functions
##############################

get_property() {
    if [ ! -f $CONF_FILE ]; then
        echo "$CONF_FILE not found! Using $1=$3" >&2;
        param_value=$3
    else
        param_value=`sed '/^\#/d' $CONF_FILE | grep $1 | tail -n 1 |\
        cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`

        if ([ "$2" == "boolean" ] && [ "$param_value" != true ] && [ "$param_value" != false ]) || \
           ([ "$2" == "integer" ] && [[ ! "$param_value" =~ ^[-+]?([1-9][[:digit:]]*|1)$ ]]) || \
           ([ "$2" == "string" ] && [ "$param_value" == "" ]) ; then
            echo "Wrong paramater in $CONF_FILE. Using $1=$3" >&2
            param_value=$3
        fi
    fi

    echo $param_value
}


##############################
# Checks
##############################
#
# Check for live cd rootfs
[ $(findmnt / -no fstype) == "overlay" ] && { echo "==> skipping timeshift-autosnap because system is booted in Live CD mode..."; exit 0; }

#
# Check for Skip Variable
[[ -v SKIP_AUTOSNAP ]] && { echo "==> skipping timeshift-autosnap due SKIP_AUTOSNAP environment variable being set."; exit 0; }


#
# Check Parameters from config file
if $(get_property "skipAutosnap" "boolean" "false") ; then
    echo "==> skipping pacman-zfs-updatesnap due skipAutosnap in $CONF_FILE set to TRUE." >&2; exit 0;
fi

##############################
# Parameters from config/defaults
##############################
#
#
readonly ZFS_MAXSNAPSHOTS=$(get_property "maxSnapshots" "integer" "3")

#
# build the snapshot name
readonly SNAPSHOT_DESCRIPTION="$(get_property "snapshotDescription" "string" "pacman-zfs-updatesnap" | tr -d '"')_$(date +'%Y-%m-%d_%H-%M-%S')"

#
# build the config variables
readonly REFIND_SNAPSHOT_CONFIG_FILENAME="snapshot_$SNAPSHOT_DESCRIPTION.conf"
readonly REFIND_SNAPSHOT_INCLUDE_LINE="include $REFIND_SNAPSHOT_CONFIG_FILENAME"
readonly REFIND_GLOBAL_CONFIG="$(get_property "refindConfigFile" "string" "/boot/efi/EFI/refind/refind.conf" | tr -d '"')"




##############################
#   Main Script Part
##############################
#
# get rootfs from zpool parameter bootfs
ZFS_BOOTFS=$(zpool get bootfs -o value -pH)

#
# Check if we found bootfs
if [ "$ZFS_BOOTFS" == "none" ]
then
    echo "Could not get BOOTFS/Root dataset! Stopping..."
    exit 1
else
    echo "==> ZFS BootFS found: $ZFS_BOOTFS"
fi

#
# create snapshot
echo "==> Creating snapshot $ZFS_BOOTFS@$SNAPSHOT_DESCRIPTION"
ZFS_SNAPSHOT_RESULT=$(/usr/bin/zfs snapshot ${ZFS_BOOTFS}@${SNAPSHOT_DESCRIPTION})

if [ $? != 0 ]; then
    echo "ERROR: Create Snapshot failed. CMD Output:\n$ZFS_SNAPSHOT_RESULT"
    exit 1
fi

#
# start with empty list of submenuentries
list_submenuentries=""

#
# manage UKI Kernel Files if parameter is set to true
if $(get_property "manageUKIKernels" "boolean" "false") ; then
    #
    # create target folder
    readonly SNAPSHOT_TARGET_FOLDER="/boot/efi/EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION"
    mkdir -p $SNAPSHOT_TARGET_FOLDER

    for kernel in $LIST_MKINITCPIO_PRESET_KERNELS
    do
        #
        # set name of kernel file
        if [[ "$kernel" == "default" ]]; then
            kernel="linux"
        else
            kernel="linux-$kernel"
        fi

        #
        # IF additional kernel - set submenuentry and add to submenu list
        if [[ "$kernel" != "linux" ]]; then
            #
            # set the submenu entry variable
            REFIND_SNAPSHOT_CONFIG_TEMPLATE_INNER=$(cat <<-END
    submenuentry "$kernel" {
        loader   /EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/$kernel.efi
    }

END
)

            #
            # add submenu entry variable to list
            list_submenuentries="$list_submenuentries\n$REFIND_SNAPSHOT_CONFIG_TEMPLATE_INNER"

        fi
        


        #
        # copy kernels to snapshot folder
        cp /boot/efi/EFI/Linux/$kernel.efi $SNAPSHOT_TARGET_FOLDER/

        #
        # If we should resign kernel remove the signature now
        if $(get_property "ReSignUKIKernels" "boolean" "false") ; then
            #
            # remove secure boot signature
            sbattach --remove $SNAPSHOT_TARGET_FOLDER/$kernel.efi

            #
            # get state of kernel signature
            verifyresult=$(sbverify --list $SNAPSHOT_TARGET_FOLDER/$kernel.efi 2>&1)
            
            #
            # check state of kernel signature
            if [[ "$verifyresult" != "No signature table present" ]]; then
                echo "ERROR: Could not remove signature." >2
            fi
        fi            

        #
        # dump cmdline from kernel file
        TEMP_FILE_CMDLINE_DUMP=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
        objcopy --dump-section .cmdline=$TEMP_FILE_CMDLINE_DUMP $SNAPSHOT_TARGET_FOLDER/$kernel.efi

        #
        # change cmdline file
        sed -i 's/root=ZFS='$(echo $ZFS_BOOTFS | sed 's/\//\\\//g')'/root=ZFS='$(echo $ZFS_BOOTFS | sed 's/\//\\\//g')'@'"$SNAPSHOT_DESCRIPTION"'/g' $TEMP_FILE_CMDLINE_DUMP

        #
        # remove cmdline from kernel
        objcopy --remove-section .cmdline $SNAPSHOT_TARGET_FOLDER/$kernel.efi

        #
        # add new cmdline from temp file
        objcopy --add-section .cmdline=$TEMP_FILE_CMDLINE_DUMP $SNAPSHOT_TARGET_FOLDER/$kernel.efi

        if $(get_property "ReSignUKIKernels" "boolean" "false") ; then
            #
            # re-Sign the kernel file with the secureboot certificate
            sbctl sign $SNAPSHOT_TARGET_FOLDER/$kernel.efi
        fi

        #
        # remove temp cmdline file
        rm $TEMP_FILE_CMDLINE_DUMP
        
    done

    #
    #
    REFIND_SNAPSHOT_CONFIG_TEMPLATE_OUTER=$(cat <<-END
menuentry "Manjaro Snapshot - $SNAPSHOT_DESCRIPTION" {
    icon     /EFI/refind/refind-theme-maia/icons/384-144/os_manjaro.png
    loader   /EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/linux.efi
    $list_submenuentries
}
END
)
    
    #
    # create and insert refind config file
    echo -e "$REFIND_SNAPSHOT_CONFIG_TEMPLATE_OUTER" > /boot/efi/EFI/refind/$REFIND_SNAPSHOT_CONFIG_FILENAME
    echo -e "$REFIND_SNAPSHOT_INCLUDE_LINE" >> $REFIND_GLOBAL_CONFIG

fi


exit 0


#
# handle snapshot count if parameter in config is set
if $(get_property "deleteSnapshots" "boolean" "false") ; then
    echo "==> deleteSnapshots enabled. Getting Snapshot list..."
    # get list of snapshots
    zfs list -t snapshot -o name -pH $ZFS_BOOTFS > $SNAPSHOTS_TO_DELETE

    echo "Config - maxSnapshots: $ZFS_MAXSNAPSHOTS"
    count_to_delete=$(($(echo $SNAPSHOTS_TO_DELETE|wc -l) - $ZFS_MAXSNAPSHOTS))

    if [ "$count_to_delete" -gt 0 ] ; then
        sed -i $(($count_to_delete))q $SNAPSHOTS_TO_DELETE
        
        for snapshot in $(cat $SNAPSHOTS_TO_DELETE); do
            echo "==> Deleting Snapshot: $snapshot"
        done
    fi
fi;


set +x