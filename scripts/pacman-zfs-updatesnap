#!/bin/bash
# pacman-zfs-updatesnap
#
# modified by hasechris
# inspired by timeshift-autosnap



set -e
##############################
#   Variables
##############################
ZFS_BOOTFS="none"
#readonly CONF_FILE="/etc/pacman-zfs-updatesnap.conf"
readonly CONF_FILE="/home/nemu/Projects/Pacman-ZFS-Hook/pacman-zfs-updatesnap.conf"
readonly SNAPSHOTS_TO_DELETE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
readonly OS_DISTRO=$(cat /etc/os-release | grep "^ID=" | cut -d '=' -f 2)

if [[ "$OS_DISTRO" == "manjaro" ]]; then
    readonly LIST_INSTALLED_KERNELS=$(pacman -Qs linux | grep -e "local/linux[0-9][0-9][[:space:]]" | awk '{print $1}' | sed 's/local\///g')
elif [[ "$OS_DISTRO" == "arch" ]]; then
    readonly LIST_INSTALLED_KERNELS=$(pacman -Qs linux | grep -e "local/linux[[:space:]]" | awk '{print $1}' | sed 's/local\///g')
fi


##############################
# Functions
##############################
get_property() {
    set +x
    if [ ! -f $CONF_FILE ]; then
        echo "$CONF_FILE not found! Using $1=$3" >&2;
        param_value=$3
    else
        param_value=`sed '/^\#/d' $CONF_FILE | grep $1 | tail -n 1 |\
        cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`

        if ([ "$2" == "boolean" ] && [ "$param_value" != true ] && [ "$param_value" != false ]) || \
           ([ "$2" == "integer" ] && [[ ! "$param_value" =~ ^[-+]?([1-9][[:digit:]]*|1)$ ]]) || \
           ([ "$2" == "string" ] && [ "$param_value" == "" ]) ; then
            echo "Wrong paramater in $CONF_FILE. Using $1=$3" >&2
            param_value=$3
        fi
    fi

    echo $param_value
    set -x
}


##############################
# Checks
##############################
#
# Check for live cd rootfs
[ $(findmnt / -no fstype) == "overlay" ] && { echo "==> skipping timeshift-autosnap because system is booted in Live CD mode..."; exit 0; }

#
# Check for Skip Variable
[[ -v SKIP_AUTOSNAP ]] && { echo "==> skipping timeshift-autosnap due SKIP_AUTOSNAP environment variable being set."; exit 0; }


#
# Check Parameters from config file
if $(get_property "skipAutosnap" "boolean" "false") ; then
    echo "==> skipping pacman-zfs-updatesnap due skipAutosnap in $CONF_FILE set to TRUE." >&2; exit 0;
fi

##############################
# Parameters from config/defaults
##############################
#
#
readonly ZFS_MAXSNAPSHOTS=$(get_property "maxSnapshots" "integer" "3")

#
# build the snapshot name
readonly SNAPSHOT_DESCRIPTION="$(get_property "snapshotDescription" "string" "pacman-zfs-updatesnap" | tr -d '"')_$(date +'%Y-%m-%d_%H-%M-%S')"

#
# build the config variables
readonly REFIND_SNAPSHOT_CONFIG_FILENAME="snapshot_$SNAPSHOT_DESCRIPTION.conf"
readonly REFIND_SNAPSHOT_INCLUDE_LINE="include $REFIND_SNAPSHOT_CONFIG_FILENAME"
readonly REFIND_GLOBAL_CONFIG="$(get_property "refindConfigFile" "string" "/boot/efi/EFI/refind/refind.conf" | tr -d '"')"




##############################
#   Main Script Part
##############################
#
# get rootfs from zpool parameter bootfs
ZFS_BOOTFS=$(zpool get bootfs -o value -pH)

#
# Check if we found bootfs
if [ "$ZFS_BOOTFS" == "none" ]
then
    echo "Could not get BOOTFS/Root dataset! Stopping..."
    exit 1
else
    echo "==> ZFS BootFS found: $ZFS_BOOTFS"
fi

#
# create snapshot
echo "==> Creating snapshot $ZFS_BOOTFS@$SNAPSHOT_DESCRIPTION"
ZFS_SNAPSHOT_RESULT=$(/usr/bin/zfs snapshot ${ZFS_BOOTFS}@${SNAPSHOT_DESCRIPTION})

if [ $? != 0 ]; then
    echo "ERROR: Create Snapshot failed. CMD Output:\n$ZFS_SNAPSHOT_RESULT"
    exit 1
fi

#
# start with empty list of submenuentries
list_submenuentries=""

#
# manage UKI Kernel Files if parameter is set to true
if $(get_property "manageUKIKernels" "boolean" "false") ; then
    #set -x

    #
    # create target folder
    readonly SNAPSHOT_TARGET_FOLDER="/boot/efi/EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION"
    mkdir -p $SNAPSHOT_TARGET_FOLDER


    #
    # iterate over installed kernels
    for presetfile in $LIST_INSTALLED_KERNELS
    do

        #
        # get mkinitcpio presets for kernel version
        LIST_MKINITCPIO_PRESET_KERNEL=$(cat /etc/mkinitcpio.d/${presetfile}.preset | grep 'PRESETS=' | cut -d '=' -f2 | tr -d '(' | tr -d ')' | tr -d "'")

        #
        # get path of kernel file
        PATH_KERNEL_FILE=$(cat /etc/mkinitcpio.d/${presetfile}.preset | grep "ALL_kver=" | cut -d '=' -f 2 | tr -d '"')

        for preset in $LIST_MKINITCPIO_PRESET_KERNEL
        do
            #
            # set name of kernel file
            if [[ "$preset" == "default" ]]; then
                kernel="$presetfile"
            else
                kernel="$presetfile-$preset"
            fi

            #
            # set the submenu entry variable
            REFIND_SNAPSHOT_CONFIG_TEMPLATE_INNER=$(cat <<-END
    submenuentry "$kernel" {
        loader   /EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/$kernel.efi
    }

END
)

            #
            # add submenu entry variable to list
            list_submenuentries="$list_submenuentries\n$REFIND_SNAPSHOT_CONFIG_TEMPLATE_INNER"

            #
            # determine which cmdline files to use
            case $preset in
            "default")
                cmdline_files=$(get_property "default_cmdline_files" "string" "" | tr -d '"')
                ;;
            "fallback")
                cmdline_files=$(get_property "fallback_cmdline_files" "string" "" | tr -d '"')
                ;;
            "rescue")
                cmdline_files=$(get_property "rescue_cmdline_files" "string" "" | tr -d '"')
                ;;
            "emergency")
                cmdline_files=$(get_property "emergency_cmdline_files" "string" "" | tr -d '"')
                ;;
            esac

            if [[ -z "$cmdline_files" ]]; then
                echo "ERROR: Please specify the cmdline files in $CONF_FILE" >2
                exit 1
            fi

            #
            # build cmdline for snapshot
            for file in  ${cmdline_files//,/ }
            do
                # if zfs cmdline file -> change for snapshot
                if [[ "$file" == "zfs" ]]; then
                    cmdline="$cmdline $(cat /etc/cmdline.d/$file.conf | grep -v '#' | sed 's/root=ZFS='$(echo $ZFS_BOOTFS | sed 's/\//\\\//g')'/root=ZFS='$(echo $ZFS_BOOTFS | sed 's/\//\\\//g')'@'"$SNAPSHOT_DESCRIPTION"'/g')"
                else 
                    cmdline="$cmdline $(cat /etc/cmdline.d/$file.conf | grep -v '#')"
                fi
            done
            
            #
            # get path of initrd file
            PATH_INITRD_FILE=$(cat /etc/mkinitcpio.d/${presetfile}.preset | grep "${preset}_image=" | cut -d '=' -f 2 | tr -d '"')

            ukify build \
                --output $SNAPSHOT_TARGET_FOLDER/$kernel.efi \
                --uname $(uname -r) \
                --os-release "@/etc/os-release" \
                --cmdline "$cmdline" \
                --linux $PATH_KERNEL_FILE \
                $(
                  if pacman -Q intel-ucode > /dev/null 2>&1; then
                      echo "--initrd /boot/intel-ucode.img"
                  fi
                  if pacman -Q amd-ucode > /dev/null 2>&1; then
                      echo "--initrd /boot/amd-ucode.img"
                  fi
                ) \
                --initrd "$PATH_INITRD_FILE"
            
            #
            # If we should resign kernel
            if $(get_property "ReSignUKIKernels" "boolean" "false") ; then
                #
                # sign new uki file
                sbctl sign $SNAPSHOT_TARGET_FOLDER/$kernel.efi
            fi
            
        done
    done
        #
        #
        REFIND_SNAPSHOT_CONFIG_TEMPLATE_OUTER=$(cat <<-END
menuentry "Manjaro Snapshot - $SNAPSHOT_DESCRIPTION" {
    icon     /EFI/refind/refind-theme-maia/icons/384-144/os_manjaro.png
    $list_submenuentries
}
END
)
    if $(get_property "updateRefind" "boolean" "false") ; then
        #
        # create and insert refind config file
        echo -e "$REFIND_SNAPSHOT_CONFIG_TEMPLATE_OUTER" > /boot/efi/EFI/refind/$REFIND_SNAPSHOT_CONFIG_FILENAME
        echo -e "$REFIND_SNAPSHOT_INCLUDE_LINE" >> $REFIND_GLOBAL_CONFIG
    fi
fi


#
# handle snapshot count if parameter in config is set
if $(get_property "deleteSnapshots" "boolean" "false") ; then
    echo "==> deleteSnapshots enabled. Getting Snapshot list..."
    # get list of snapshots
    snapshots=$(zfs list -t snapshot -o name -pH $ZFS_BOOTFS)
    snapshot_count=$(echo "$snapshots" | wc -l)

    echo "Config - maxSnapshots: $ZFS_MAXSNAPSHOTS"
    count_to_delete=$(($snapshot_count - $ZFS_MAXSNAPSHOTS))
    
    if [ $count_to_delete -gt 0 ] ; then
        echo "Have to delete $count_to_delete snapshots"
        #
        # aka remove last x lines of file
        filtered_snapshots=$(echo "$snapshots" | head -n -"$ZFS_MAXSNAPSHOTS")
        # | sed '1,'"$ZFS_MAXSNAPSHOTS"' d'  )


        for snapshot in $filtered_snapshots
        do
            echo "==> Deleting ZFS Snapshot: $snapshot"

            #
            # delete ZFS Snap
            zfs destroy $snapshot

            #
            #
            if $(get_property "manageUKIKernels" "boolean" "false") ; then
                #
                #
                snapshot_name=$(echo "$snapshot" | sed -e 's/'$(echo "$ZFS_BOOTFS" | sed 's/\//\\\//g')'\@//g' )

                #
                # delete folder for 
                rm -r /boot/efi/EFI/Linux/snapshots/$snapshot_name

                if $(get_property "updateRefind" "boolean" "false") ; then
                    #
                    # remove rEFInd config for snapshot
                    rm /boot/efi/EFI/refind/snapshot_${snapshot_name}.conf

                    #
                    # remove include from global refind_config
                    sed -i '/include snapshot_'"$snapshot_name"'/d' $REFIND_GLOBAL_CONFIG
                fi
            fi
        done
    else
        echo "No Snapshots found to delete."
    fi
fi



set +x