#!/bin/bash
# zfs-snap-pac
#
# modified by hasechris
# inspired by timeshift-autosnap

set -e
#set -x
##############################
#   Variables
##############################
ZFS_BOOTFS="none"
readonly CONF_FILE="/etc/pacman-zfs-updatesnap.conf"
readonly SNAPSHOTS_TO_DELETE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)

##############################
# Functions
##############################

get_property() {
    if [ ! -f $CONF_FILE ]; then
        echo "$CONF_FILE not found! Using $1=$3" >&2;
        param_value=$3
    else
        param_value=`sed '/^\#/d' $CONF_FILE | grep $1 | tail -n 1 |\
        cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`

        if ([ "$2" == "boolean" ] && [ "$param_value" != true ] && [ "$param_value" != false ]) || \
           ([ "$2" == "integer" ] && [[ ! "$param_value" =~ ^[-+]?([1-9][[:digit:]]*|1)$ ]]) || \
           ([ "$2" == "string" ] && [ "$param_value" == "" ]) ; then
            echo "Wrong paramater in $CONF_FILE. Using $1=$3" >&2
            param_value=$3
        fi
    fi

    echo $param_value
}


##############################
# Checks
##############################
#
# Check for live cd rootfs
[ $(findmnt / -no fstype) == "overlay" ] && { echo "==> skipping timeshift-autosnap because system is booted in Live CD mode..."; exit 0; }

#
# Check for Skip Variable
[[ -v SKIP_AUTOSNAP ]] && { echo "==> skipping timeshift-autosnap due SKIP_AUTOSNAP environment variable being set."; exit 0; }


#
# Check Parameters from config file
if $(get_property "skipAutosnap" "boolean" "false") ; then
    echo "==> skipping pacman-zfs-updatesnap due skipAutosnap in $CONF_FILE set to TRUE." >&2; exit 0;
fi

##############################
# Parameters from config/defaults
##############################
#
#
readonly ZFS_MAXSNAPSHOTS=$(get_property "maxSnapshots" "integer" "3")

#
# build the snapshot name
readonly SNAPSHOT_DESCRIPTION="$(get_property "snapshotDescription" "string" "pacman-zfs-updatesnap")_$(date +'%Y-%m-%d_%H-%M-%S')"

#
# build the config variables
readonly REFIND_SNAPSHOT_CONFIG_FILENAME="snapshot_$SNAPSHOT_DESCRIPTION.conf"
readonly REFIND_SNAPSHOT_INCLUDE_LINE="include $REFIND_SNAPSHOT_CONFIG_FILENAME"
readonly REFIND_SNAPSHOT_CONFIG_TEMPLATE=$(cat <<-END

menuentry "Manjaro - $SNAPSHOT_DESCRIPTION" {
    icon     /EFI/refind/refind-theme-maia/icons/384-144/os_manjaro.png
    loader   /EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/linux.efi
    submenuentry "Fallback" {
        loader /EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/linux-fallback.efi
    }
    submenuentry "Rescue" {
        loader   /EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/linux-rescue.efi
    }
    submenuentry "Emergency" {
        loader   /EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/linux-emergency.efi
    }
}
END
)



##############################
#   Main Script Part
##############################
#
# get rootfs from zpool parameter bootfs
ZFS_BOOTFS=$(zpool get bootfs -o value -pH)

#
# Check if we found bootfs
if [ "$ZFS_BOOTFS" == "none" ]
then
    echo "Could not get BOOTFS/Root dataset! Stopping..."
    exit 1
else
    echo "==> ZFS BootFS found: $ZFS_BOOTFS"
fi

#
# create snapshot
echo "==> Creating snapshot $ZFS_BOOTFS@$SNAPSHOT_DESCRIPTION"
ZFS_SNAPSHOT_RESULT=$(/usr/bin/zfs snapshot ${ZFS_BOOTFS}@${SNAPSHOT_DESCRIPTION})

if [ $? == 1 ]; then
    echo "ERROR: Create Snapshot failed. CMD Output:\n$ZFS_SNAPSHOT_RESULT"
fi

# create target folder
readonly SNAPSHOT_TARGET_FOLDER="/boot/efi/EFI/Linux/snapshots/$SNAPSHOT_DESCRIPTION/"
mkdir -p $SNAPSHOT_TARGET_FOLDER

#
# copy kernels to snapshot folder
cp /boot/efi/EFI/Linux/linux.efi $SNAPSHOT_TARGET_FOLDER
cp /boot/efi/EFI/Linux/linux-fallback.efi $SNAPSHOT_TARGET_FOLDER
cp /boot/efi/EFI/Linux/linux-rescue.efi $SNAPSHOT_TARGET_FOLDER
cp /boot/efi/EFI/Linux/linux-emergency.efi $SNAPSHOT_TARGET_FOLDER

#
# handle snapshot count if parameter in config is set
if $(get_property "deleteSnapshots" "boolean" "false") ; then
    echo "==> deleteSnapshots enabled. Getting Snapshot list..."
    # get list of snapshots
    zfs list -t snapshot -o name -pH $ZFS_BOOTFS > $SNAPSHOTS_TO_DELETE

    echo "Config - maxSnapshots: $ZFS_MAXSNAPSHOTS"
    count_to_delete=$(($(echo $SNAPSHOTS_TO_DELETE|wc -l) - $ZFS_MAXSNAPSHOTS))

    if [ "$count_to_delete" -gt 0 ] ; then
        sed -i $(($count_to_delete))q $SNAPSHOTS_TO_DELETE
        
        for snapshot in $(cat $SNAPSHOTS_TO_DELETE); do
            echo "==> Deleting Snapshot: $snapshot"
        done
    fi
fi;


set +x